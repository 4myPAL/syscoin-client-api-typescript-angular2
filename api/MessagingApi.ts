/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class MessagingApi {
    protected basePath = 'http://localhost:8001';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * Show stored values of a single message.
     * @param guid 
     */
    public messageinfo(guid: string, extraHttpRequestParams?: any): Observable<models.Message> {
        return this.messageinfoWithHttpInfo(guid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Create a new Syscoin encrypted message.
     * @param request 
     */
    public messagenew(request: models.MessageNewRequest, extraHttpRequestParams?: any): Observable<Array<string>> {
        return this.messagenewWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * List received messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases 
     * @param message 
     * @param privatekey 
     */
    public messagereceivelist(aliases?: Array<string>, message?: string, privatekey?: string, extraHttpRequestParams?: any): Observable<Array<models.Message>> {
        return this.messagereceivelistWithHttpInfo(aliases, message, privatekey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * List sent messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases 
     * @param message 
     * @param privatekey 
     */
    public messagesentlist(aliases?: Array<string>, message?: string, privatekey?: string, extraHttpRequestParams?: any): Observable<Array<models.Message>> {
        return this.messagesentlistWithHttpInfo(aliases, message, privatekey, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * Show stored values of a single message.
     * @param guid 
     */
    public messageinfoWithHttpInfo(guid: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/messageinfo`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'guid' is not null or undefined
        if (guid === null || guid === undefined) {
            throw new Error('Required parameter guid was null or undefined when calling messageinfo.');
        }
        if (guid !== undefined) {
            if(guid instanceof Date) {
                queryParameters.set('guid', <any>guid.d.toISOString());
            } else {
                queryParameters.set('guid', <any>guid);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Create a new Syscoin encrypted message.
     * @param request 
     */
    public messagenewWithHttpInfo(request: models.MessageNewRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/messagenew`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling messagenew.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * List received messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases 
     * @param message 
     * @param privatekey 
     */
    public messagereceivelistWithHttpInfo(aliases?: Array<string>, message?: string, privatekey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/messagereceivelist`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (aliases) {
            queryParameters.set('aliases', aliases.join(COLLECTION_FORMATS['csv']));
        }

        if (message !== undefined) {
            if(message instanceof Date) {
                queryParameters.set('message', <any>message.d.toISOString());
            } else {
                queryParameters.set('message', <any>message);
            }
        }

        if (privatekey !== undefined) {
            if(privatekey instanceof Date) {
                queryParameters.set('privatekey', <any>privatekey.d.toISOString());
            } else {
                queryParameters.set('privatekey', <any>privatekey);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * List sent messages that an array of aliases own. Set of aliases to look up based on alias, and private key to decrypt any data found in message.
     * @param aliases 
     * @param message 
     * @param privatekey 
     */
    public messagesentlistWithHttpInfo(aliases?: Array<string>, message?: string, privatekey?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/messagesentlist`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (aliases) {
            queryParameters.set('aliases', aliases.join(COLLECTION_FORMATS['csv']));
        }

        if (message !== undefined) {
            if(message instanceof Date) {
                queryParameters.set('message', <any>message.d.toISOString());
            } else {
                queryParameters.set('message', <any>message);
            }
        }

        if (privatekey !== undefined) {
            if(privatekey instanceof Date) {
                queryParameters.set('privatekey', <any>privatekey.d.toISOString());
            } else {
                queryParameters.set('privatekey', <any>privatekey);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
