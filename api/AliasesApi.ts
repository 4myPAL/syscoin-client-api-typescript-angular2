/**
 * Syscoin API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AliasesApi {
    protected basePath = 'http://localhost:8001';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * list affiliations with merchant offers.
     */
    public aliasaffiliates(extraHttpRequestParams?: any): Observable<Array<any>> {
        return this.aliasaffiliatesWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Authenticates an alias with a provided password and returns the private key if successful. Warning: Calling this function over a public network can lead to someone reading your password/private key in plain text.
     * @param alias 
     * @param password 
     */
    public aliasauthenticate(alias: string, password: string, extraHttpRequestParams?: any): Observable<Array<any>> {
        return this.aliasauthenticateWithHttpInfo(alias, password, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Filter aliases [regexp] : apply [regexp] on aliases, empty means all aliases [from] : show results from this GUID [from], empty means first. [aliasfilter] : shows all aliases that are safe to display (not on the ban list) aliasfilter \&quot;\&quot; 5 &#x3D; list aliases updated in last 5 blocks aliasfilter \&quot;^alias\&quot; &#x3D; list all aliases starting with \&quot;alias\&quot; aliasfilter 36000 0 0 stat &#x3D; display stats (number of aliases) on active aliases
     * @param regexp apply [regexp] on aliases, empty means all aliases
     * @param from show results from this GUID [from], empty means first
     * @param safesearch shows all aliases that are safe to display (not on the ban list)
     */
    public aliasfilter(regexp: string, from?: string, safesearch?: string, extraHttpRequestParams?: any): Observable<Array<models.AliasListEntry>> {
        return this.aliasfilterWithHttpInfo(regexp, from, safesearch, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * List all stored values of an alias.
     * @param aliasname 
     */
    public aliashistory(aliasname: string, extraHttpRequestParams?: any): Observable<Array<models.AliasHistoryEntry>> {
        return this.aliashistoryWithHttpInfo(aliasname, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Show values of an alias.
     * @param aliasname 
     */
    public aliasinfo(aliasname: string, extraHttpRequestParams?: any): Observable<models.Alias> {
        return this.aliasinfoWithHttpInfo(aliasname, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * List my own aliases.
     * @param aliasname Alias name to use as filter.
     */
    public aliaslist(aliasname?: string, extraHttpRequestParams?: any): Observable<Array<models.AliasListEntry>> {
        return this.aliaslistWithHttpInfo(aliasname, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Creates a new Syscoin Alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasnew(request: models.AliasNewRequest, extraHttpRequestParams?: any): Observable<Array<string>> {
        return this.aliasnewWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Update and possibly transfer an alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasupdate(request: models.AliasUpdateRequest, extraHttpRequestParams?: any): Observable<Array<string>> {
        return this.aliasupdateWithHttpInfo(request, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * list affiliations with merchant offers.
     */
    public aliasaffiliatesWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/aliasaffiliates`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Authenticates an alias with a provided password and returns the private key if successful. Warning: Calling this function over a public network can lead to someone reading your password/private key in plain text.
     * @param alias 
     * @param password 
     */
    public aliasauthenticateWithHttpInfo(alias: string, password: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/aliasauthenticate`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'alias' is not null or undefined
        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling aliasauthenticate.');
        }
        // verify required parameter 'password' is not null or undefined
        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling aliasauthenticate.');
        }
        if (alias !== undefined) {
            if(alias instanceof Date) {
                queryParameters.set('alias', <any>alias.d.toISOString());
            } else {
                queryParameters.set('alias', <any>alias);
            }
        }

        if (password !== undefined) {
            if(password instanceof Date) {
                queryParameters.set('password', <any>password.d.toISOString());
            } else {
                queryParameters.set('password', <any>password);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Filter aliases [regexp] : apply [regexp] on aliases, empty means all aliases [from] : show results from this GUID [from], empty means first. [aliasfilter] : shows all aliases that are safe to display (not on the ban list) aliasfilter \&quot;\&quot; 5 &#x3D; list aliases updated in last 5 blocks aliasfilter \&quot;^alias\&quot; &#x3D; list all aliases starting with \&quot;alias\&quot; aliasfilter 36000 0 0 stat &#x3D; display stats (number of aliases) on active aliases
     * @param regexp apply [regexp] on aliases, empty means all aliases
     * @param from show results from this GUID [from], empty means first
     * @param safesearch shows all aliases that are safe to display (not on the ban list)
     */
    public aliasfilterWithHttpInfo(regexp: string, from?: string, safesearch?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/aliasfilter`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'regexp' is not null or undefined
        if (regexp === null || regexp === undefined) {
            throw new Error('Required parameter regexp was null or undefined when calling aliasfilter.');
        }
        if (regexp !== undefined) {
            if(regexp instanceof Date) {
                queryParameters.set('regexp', <any>regexp.d.toISOString());
            } else {
                queryParameters.set('regexp', <any>regexp);
            }
        }

        if (from !== undefined) {
            if(from instanceof Date) {
                queryParameters.set('from', <any>from.d.toISOString());
            } else {
                queryParameters.set('from', <any>from);
            }
        }

        if (safesearch !== undefined) {
            if(safesearch instanceof Date) {
                queryParameters.set('safesearch', <any>safesearch.d.toISOString());
            } else {
                queryParameters.set('safesearch', <any>safesearch);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * List all stored values of an alias.
     * @param aliasname 
     */
    public aliashistoryWithHttpInfo(aliasname: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/aliashistory`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'aliasname' is not null or undefined
        if (aliasname === null || aliasname === undefined) {
            throw new Error('Required parameter aliasname was null or undefined when calling aliashistory.');
        }
        if (aliasname !== undefined) {
            if(aliasname instanceof Date) {
                queryParameters.set('aliasname', <any>aliasname.d.toISOString());
            } else {
                queryParameters.set('aliasname', <any>aliasname);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Show values of an alias.
     * @param aliasname 
     */
    public aliasinfoWithHttpInfo(aliasname: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/aliasinfo`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'aliasname' is not null or undefined
        if (aliasname === null || aliasname === undefined) {
            throw new Error('Required parameter aliasname was null or undefined when calling aliasinfo.');
        }
        if (aliasname !== undefined) {
            if(aliasname instanceof Date) {
                queryParameters.set('aliasname', <any>aliasname.d.toISOString());
            } else {
                queryParameters.set('aliasname', <any>aliasname);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * List my own aliases.
     * @param aliasname Alias name to use as filter.
     */
    public aliaslistWithHttpInfo(aliasname?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/aliaslist`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (aliasname !== undefined) {
            if(aliasname instanceof Date) {
                queryParameters.set('aliasname', <any>aliasname.d.toISOString());
            } else {
                queryParameters.set('aliasname', <any>aliasname);
            }
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Creates a new Syscoin Alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasnewWithHttpInfo(request: models.AliasNewRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/aliasnew`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliasnew.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Update and possibly transfer an alias. Requires wallet passphrase to be set with walletpassphrase call.
     * @param request 
     */
    public aliasupdateWithHttpInfo(request: models.AliasUpdateRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/aliasupdate`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling aliasupdate.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (token) required
        if (this.configuration.apiKey) {
            headers.set('token', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: request == null ? '' : JSON.stringify(request), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
